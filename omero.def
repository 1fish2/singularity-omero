BootStrap: debootstrap
OSVersion: trusty
MirrorURL: http://us.archive.ubuntu.com/ubuntu/

%post
  echo "Installing build tools"
  # Enable the universe repository, otherwise we won't be able to find many of the
  # required packages.
  sed 's/main$/main universe/' -i /etc/apt/sources.list
  apt-get update
  apt-get install -y --no-install-recommends \
    software-properties-common gcc g++ wget less

  echo "Installing OMERO dependencies"
  # Suggested install instructions:
  # https://www.openmicroscopy.org/site/support/omero5.2/sysadmins/unix/server-ubuntu1404-ice36.html
  add-apt-repository -y ppa:openjdk-r/ppa
  add-apt-repository -y ppa:fkrull/deadsnakes-python2.7
  apt-get update
  apt-get install -y --no-install-recommends \
    openjdk-7-jre \
    python python-dev \
    python-pip \
    python-virtualenv \
    python-matplotlib python-scipy python-tables \
    libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev \
    libwebp-dev tcl8.6-dev tk8.6-dev
  pip install --upgrade pip
  # pip install ... fails for some reason after upgrading pip, but running
  # with the absolute path to pip works.
  /usr/local/bin/pip install "Pillow==2.9.0"

  echo "Installing Ice 3.6"
  apt-key adv --keyserver keyserver.ubuntu.com --recv 5E6DA83306132997
  apt-add-repository "deb http://zeroc.com/download/apt/ubuntu`lsb_release -rs` stable main"
  apt-get update
  apt-get install -y --no-install-recommends \
    db5.3-util libssl-dev libbz2-dev libmcpp-dev libdb++-dev libdb-dev \
    zeroc-ice-all-runtime zeroc-ice-all-dev
  /usr/local/bin/pip install "zeroc-ice==3.6.3"

  echo "Installing Postgres"
  add-apt-repository -y "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main"
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
  apt-get update
  apt-get install -y --no-install-recommends postgresql-9.4
  locale-gen en_US.utf8
  # The user running PostgreSQL requires write access to /var/run/postgresql
  # so that the PostgreSQL process can write lock files.
  chmod -R o+rw /var/run/postgresql
  # Installing PostgreSQL starts a database cluster, which we want to be stopped
  # so that the build exits properly.
  service postgresql stop

  echo "Installing OMERO.web dependencies"
  add-apt-repository -y ppa:nginx/stable
  apt-get update
  apt-get install -y --no-install-recommends \
    nginx openssl
  /usr/local/bin/pip install \
    "django==1.8.16" \
    "django-debug-toolbar==1.6" \
    "gunicorn==19.6.0"
  rm /etc/nginx/sites-enabled/default
  # The user running OMERO.web needs write access to /etc/nginx so
  # OMERO.web can store its nginx configuration.
  chmod -R o+w /etc/nginx
  # The user running nginx needs write access to /var/log/nginx so that
  # nginx can initially inform the user about errors if provided log
  # locations are invalid.
  chmod -R go+rw /var/log/nginx

  echo "Installing supervisor"
  /usr/local/bin/pip install "supervisor==3.3.1"

  echo "Installing OMERO"
  export OMERO_DIR=/omero
  export OMERO_HOME=$OMERO_DIR/OMERO.server
  /usr/local/bin/pip install "omego==0.4.1"
  mkdir $OMERO_DIR
  cd $OMERO_DIR
  omego download --branch=5.2.6 --ice 3.6 --unzipdir . -v server
  rm OMERO.server*zip
  ln -s OMERO.server-* $OMERO_HOME
  # OMERO.server writes to disk to store configuration settings, so we need
  # to give "other" users read and write access.
  chmod -R o+rw $OMERO_HOME

  echo "Creating bind points"
  mkdir $OMERO_DIR/run
  mkdir $OMERO_DIR/data
  mkdir $OMERO_DIR/var
  mkdir $OMERO_DIR/user_scripts
  mkdir $OMERO_DIR/postgres
  rm -r $OMERO_HOME/var
  ln -s $OMERO_DIR/var $OMERO_HOME/var
  ln -s $OMERO_DIR/user_scripts $OMERO_HOME/lib/scripts/custom_scripts

  echo "Configuring environment"
  echo >> /environment
  # The run user's PATH is carried over, but we don't want that.
  # For instance, OMERO.server can fail to launch if alternate Python
  # installations are in the PATH. The following lines explicitly specify
  # a PATH when inside the Singularity container.
  echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' >> /environment
  echo 'export PATH=/omero/OMERO.server/bin:/usr/lib/postgresql/9.4/bin:$PATH' >> /environment
  echo >> /environment
  # OMERO.server can fail to connect to the PG database if the TZ environment
  # variable is set to an unsupported value, so we just unset it, since there
  # doesn't seem to be a need for it in this environment.
  echo 'unset TZ' >> /environment

%runscript
  # Port defaults
  PG_PORT=5432
  REGISTRY_PORT=4061
  TCP_PORT=4063
  SSL_PORT=4064
  WEB_PORT=4080
  HTTP_PORT=8080

  # Default PostgreSQL password for the omero user
  PGPASSWORD=omero

  while [ "$1" != "" ]; do
    case $1 in
      --pg-port )               shift
                                PG_PORT=$1
                                ;;
      --pg-password )           shift
                                PGPASSWORD=$1
                                ;;
      --server-registry-port )  shift
                                REGISTRY_PORT=$1
                                ;;
      --server-tcp-port )       shift
                                TCP_PORT=$1
                                ;;
      --server-ssl-port )       shift
                                SSL_PORT=$1
                                ;;
      --web )                   shift
                                WEB_PORT=$1
                                ;;
      --http )                  shift
                                HTTP_PORT=$1
                                ;;
      * )                       echo "Unrecognized parameter $1"
                                exit 1
    esac
    shift
  done
  export PG_PORT PGPASSWORD REGISTRY_PORT TCP_PORT SSL_PORT WEB_PORT HTTP_PORT

  trap "/omero/run/shutdown.sh; exit" SIGHUP SIGINT SIGTERM
  supervisord --nodaemon -c /omero/run/supervisor.conf
